import random

def generateSquare(n):
    magic_square = [[0] * n for _ in range(n)]
    i, j = 0, n // 2
    num = 1
    while num <= n * n:
        magic_square[i][j] = num
        num += 1
        new_i, new_j = (i - 1) % n, (j + 1) % n
        if magic_square[new_i][new_j] != 0:
            i += 1
        else:
            i, j = new_i, new_j
    return rotate90(magic_square)

def rotate90(square):
    return [list(reversed(col)) for col in zip(*square)]

def printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, player_symbol, computer_symbol):
    print("Magic Square:")
    for row in magicSquare:
        print(' | '.join(
            f'{player_symbol}' if num in player_moves else
            f'{computer_symbol}' if num in computer_moves else
            f'{num:1}'
            for num in row
        ))
        print('-' * 9)

def checkWin(magicSquare, n, moves):
    magic_constant = n * (n * n + 1) // 2
    for i in range(n):
        if sum(magicSquare[i][j] for j in range(n) if magicSquare[i][j] in moves) == magic_constant:
            return True
        if sum(magicSquare[j][i] for j in range(n) if magicSquare[j][i] in moves) == magic_constant:
            return True
    if sum(magicSquare[i][i] for i in range(n) if magicSquare[i][i] in moves) == magic_constant:
        return True
    if sum(magicSquare[i][n - i - 1] for i in range(n) if magicSquare[i][n - i - 1] in moves) == magic_constant:
        return True
    return False

def findWinningMove(magicSquare, n, moves, available_numbers):
    for number in available_numbers:
        temp_moves = moves + [number]
        if checkWin(magicSquare, n, temp_moves):
            return number
    return None

def tossForFirstPlayer():
    return random.choice([0, 1])

def playGame(magicSquare, n):
    available_numbers = [num for row in magicSquare for num in row]
    player_moves, computer_moves = [], []

    printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, " ", " ")

    while True:
        human_choice = input('Select a number "0" or "1" for the toss: ')
        if human_choice not in ['0', '1']:
            print("Invalid input. Please enter 0 or 1.")
            continue
        break

    toss_result = tossForFirstPlayer()
    if human_choice == str(toss_result):
        print("Human won the toss!")
        player_symbol, computer_symbol = 'X', 'O'
        current_player = 'Human'
    else:
        print("Computer won the toss!")
        player_symbol, computer_symbol = 'O', 'X'
        current_player = 'Computer'

    for turn in range(n * n):
        if current_player == 'Human':
            print(f"Available numbers: {available_numbers}")
            while True:
                try:
                    player_move = int(input("Select a number from the board: "))
                    if player_move in available_numbers:
                        player_moves.append(player_move)
                        available_numbers.remove(player_move)
                        break
                    else:
                        print("Invalid choice. Choose from the available numbers.")
                except ValueError:
                    print("Invalid input. Please enter a number.")
            current_player = 'Computer'
        else:
            winning_move = findWinningMove(magicSquare, n, computer_moves, available_numbers)
            if winning_move is not None:
                computer_move = winning_move
            else:
                blocking_move = findWinningMove(magicSquare, n, player_moves, available_numbers)
                computer_move = blocking_move if blocking_move else random.choice(available_numbers)
            print(f"Computer's choice: {computer_move}")
            computer_moves.append(computer_move)
            available_numbers.remove(computer_move)
            current_player = 'Human'

        printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, player_symbol, computer_symbol)

        if checkWin(magicSquare, n, computer_moves):
            print("Computer wins!")
            return
        elif checkWin(magicSquare, n, player_moves):
            print("Player wins!")
            return

    print("It's a draw!")

def main():
    while True:
        magicSquare = generateSquare(3)
        playGame(magicSquare, 3)
        while True:
            play_again = input("Would you like to play again? (yes/no): ").lower()
            if play_again in ['yes', 'no']:
                break
            print("Invalid input. Please enter either 'yes' or 'no'.")

        if play_again == 'no':
            print("Thanks for playing!")
            break

main()
