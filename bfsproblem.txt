class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

def get_positive_integer(prompt):
    while True:
        try:
            value = int(input(prompt))
            if value > 0:
                return value
            else:
                print("Please enter a positive number greater than 0.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def build_tree():
    nodes = {}
   
    while True:
        n_n = get_positive_integer("Enter the number of nodes (1 to 50): ")
        if n_n > 50:
            print("Number of nodes exceeds 50.")
            continue
        break

    print("Enter the node value and the child nodes. If no children, enter ' - ': ")
   
    for _ in range(n_n):
        while True:
            value = input(" ").strip().split()
            if not value:
                print("Please enter at least one node value.")
                continue
           
            node_value = value[0]
            try:
                int(node_value)  # Check if the node value is an integer
            except ValueError:
                print(f"Node value '{node_value}' is not a valid integer.")
                continue

            if node_value not in nodes:
                nodes[node_value] = TreeNode(node_value)

            if value == ['-']:
                print("Root node cannot be just '-' without value.")
                continue

            for child_value in value[1:]:
                if child_value != '-' and child_value not in nodes:
                    nodes[child_value] = TreeNode(child_value)
                if child_value != '-':
                    nodes[node_value].children.append(nodes[child_value])
           
            break  # Exit loop for this node entry
   
    if len(nodes) != n_n:
        print(f"Number of entered nodes does not match the specified number ({n_n}).")
        return None

    return nodes[next(iter(nodes))], nodes

def bfs(root, search_value):
    queue = [(root, [root.value])]
   
    while queue:
        node, path = queue.pop(0)
       
        if node.value == search_value:
            return path
       
        for child in node.children:
            queue.append((child, path + [child.value]))
   
    return None

def generate_arr(root, nodes, arr=None):
    if arr is None:
        arr = [root.value]
   
    if not root.children:
        arr.extend(['-', '-'])
    else:
        child_values = [child.value for child in root.children]
        arr.extend(child_values + ['-'] * (2 - len(child_values)))

    for child_value in child_values:
        if child_value in nodes:
            generate_arr(nodes[child_value], nodes, arr)
    return arr

def tree_printer(arr, num_lvl):
    current_level = 0
    index = 0  
   
    while current_level <= num_lvl:
        nodes_at_level = 2 ** current_level
        leading_spaces = ' ' * (2 ** (num_lvl - current_level + 1) - 1)
        spaces_between_nodes = ' ' * (2 ** (num_lvl - current_level + 2) - 1)
       
        line = leading_spaces
        for _ in range(nodes_at_level):
            if index < len(arr):
                line += str(arr[index])
                index += 1
                if index < len(arr):  # Avoid index out of range
                    line += spaces_between_nodes
       
        print(line)
        current_level += 1

def find_depth(root):
    if root is None:
        return -1
    if not root.children:
        return 0
    return 1 + max(find_depth(child) for child in root.children)

def main():
    root, nodes = build_tree()
    if not root:
        return
   
    arr = generate_arr(root, nodes)
   
    search_value = input("Enter the value to search for: ")
   
    if not search_value.isdigit():
        print("Invalid input. Please enter a valid integer.")
        return

    path = bfs(root, search_value)
   
    if path:
        print(f"Path = {' -> '.join(path)}")
    else:
        print("Value not found in the tree.")

    tree_depth = find_depth(root)
    tree_printer(arr, tree_depth)

if __name__ == "__main__":
    main()
