from collections import deque
from math import gcd

def is_valid_state(state, X, Y):
    return 0 <= state[0] <= X and 0 <= state[1] <= Y

def bfs(X, Y, Z):
    visited = set()
    queue = deque([(0, 0)])
    parent = {}
    actions = {}

    while queue:
        a, b = queue.popleft()
       
        if a == Z or b == Z:
            path = []
            action_list = []
            path.append((a, b))
            action_list.append(f"Final state: Jug 1 = {a}, Jug 2 = {b}.")
           
            while (a, b) != (0, 0):
                path.append(parent[(a, b)])
                action_list.append(actions[(a, b)])
                a, b = parent[(a, b)]
           
            path.append((0, 0))
            action_list.append("Initial state.")
            path.reverse()
            action_list.reverse()
            return path, action_list

        if (a, b) in visited:
            continue

        visited.add((a, b))
        next_states = [
            ((X, b), f"Fill Jug 1 (Jug 1 = {X}, Jug 2 = {b})."),
           
            ((a, Y), f"Fill Jug 2 (Jug 1 = {a}, Jug 2 = {Y})."),
           
            ((0, b), f"Empty Jug 1 (Jug 1 = 0, Jug 2 = {b})."),
           
            ((a, 0), f"Empty Jug 2 (Jug 1 = {a}, Jug 2 = 0)."),
           
            ((a - min(a, Y - b), b + min(a, Y - b)), f"Pour water from Jug 1 to Jug 2 until Jug 2 is full (Jug 1 = {a - min(a, Y - b)}, Jug 2 = {b + min(a, Y - b)})."),
           
            ((a + min(b, X - a), b - min(b, X - a)), f"Pour water from Jug 2 to Jug 1 until Jug 1 is full (Jug 1 = {a + min(b, X - a)}, Jug 2 = {b - min(b, X - a)})."),
           
            ((0, b + a), f"Pour all water from Jug 1 to Jug 2 (Jug 1 = 0, Jug 2 = {b + a}).") if b + a <= Y else None,
           
            ((a + b, 0), f"Pour all water from Jug 2 to Jug 1 (Jug 1 = {a + b}, Jug 2 = 0).") if a + b <= X else None,
        ]

        for state_action in next_states:
            if state_action and is_valid_state(state_action[0], X, Y) and state_action[0] not in visited:
                queue.append(state_action[0])
                parent[state_action[0]] = (a, b)
                actions[state_action[0]] = state_action[1]

    return None, None

def get_input(prompt):
    while True:
        try:
            value = int(input(prompt))
            if value > 0:
                return value
            else:
                print("Please enter a positive number greater than 0.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def water_jug_problem():
    X = get_input("Enter the capacity of Jug 1: ")
    Y = get_input("Enter the capacity of Jug 2: ")
    Z = get_input("Enter the target amount of water: ")
   
    if Z > max(X, Y):
        print("No solution possible since the target is greater than both jug capacities.")
        return

    if Z % gcd(X, Y) != 0:
        print(f"No solution exists because {Z} liters cannot be measured with jug capacities {X} and {Y}.")
        return

    solution, action_list = bfs(X, Y, Z)

    if solution:
        print(f"\nSteps to get exactly {Z} liters:")
        for i, step in enumerate(solution[:-1]):  # Exclude final state from the loop
            action = action_list[i]
            print(f"Step {i + 1}: Jug 1 = {step[0]} liters, Jug 2 = {step[1]} liters - {action}")
        final_step = solution[-1]
        print(f"Final State: Jug 1 = {final_step[0]} liters, Jug 2 = {final_step[1]} liters")
    else:
        print("No solution exists for the given inputs.")

water_jug_problem()
